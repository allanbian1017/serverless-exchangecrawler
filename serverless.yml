service: ExchangeCrawler

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  memorySize: 256
  tracing: true
  versionFunctions: false
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource: 'arn:aws:dynamodb:us-east-1:*:*'
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource: '*'
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: 'arn:aws:sns:us-east-1:*:*'
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: '*'

  environment:
    CURRENCY_CHANGED_SNS_ARN:
      Fn::Join:
        - ':'
        - - arn
          - aws
          - sns
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - currencychanged
    DATADOG_API_KEY: ${ssm:/exchangecrawler/DATADOG_API_KEY}

package:
  individually: true

plugins:
  - serverless-plugin-tracing
  - serverless-webpack

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules:
      forceExclude:
        - aws-sdk

resources:
  Resources:
    currencyTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: currency
        AttributeDefinitions:
          - AttributeName: bank
            AttributeType: S
        KeySchema:
          - AttributeName: bank
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    currencyStorage:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: currencybucket

functions:
  Crawler:
    handler: api/crawler.main
    events:
      - schedule:
          rate: rate(1 hour)
  FetchHistory:
    handler: api/fetchhistory.main
    events:
      - http:
          path: history/{date}
          method: get
          cors: true
  LinePub:
    handler: api/linepub.main
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - currencyTable
              - StreamArn
    environment:
      LINE_ACCESSTOKEN: ${ssm:/exchangecrawler/LINE_ACCESSTOKEN}
      LINE_SECRET: ${ssm:/exchangecrawler/LINE_SECRET}
  Bot:
    handler: api/bot.main
    events:
      - http:
          path: bot/
          method: post
  AddHistory:
    handler: api/addhistory.main
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - currencyTable
              - StreamArn
    environment:
      GCP_PROJECT_ID: ${ssm:/exchangecrawler/GCP_PROJECT_ID}
      GCP_CLIENT_EMAIL: ${ssm:/exchangecrawler/GCP_CLIENT_EMAIL}
      GCP_PRIVATE_KEY: ${ssm:/exchangecrawler/GCP_PRIVATE_KEY}
  GetSubscription:
    handler: api/getsub.main
    events:
      - http:
          path: /{plat}/subscription
          method: get
          cors: true
  UpdateSubscription:
    handler: api/updatesub.main
    events:
      - http:
          path: /{plat}/subscription
          method: post
          cors: true